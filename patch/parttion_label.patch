diff --git a/Fat.cpp b/Fat.cpp
index dfbfd7a..4374990 100755
--- a/Fat.cpp
+++ b/Fat.cpp
@@ -492,6 +492,92 @@ int Fat::doMount(const char *fsPath, const char *mountPoint,
 
     return rc;
 }
+/***modify by xiangxiang add isInternalSd****/
+int Fat::format(const char *fsPath, unsigned int numSectors,bool isInternalSd) {
+    int fd;
+    const char *args[11];
+    int rc;
+    unsigned int bps;
+    unsigned int bsize;
+
+    if (-1 == (fd = open(fsPath, O_RDONLY, 0644)) )
+    {
+        SLOGE("failed to open %s\n", fsPath);
+        errno = EIO;
+        return -1;
+    }
+
+    args[0] = MKDOSFS_PATH;
+    args[1] = "-F";
+   // args[2] = "32";
+    if (ioctl(fd, BLKSSZGET, &bps))
+    {
+        bps = 0;
+        SLOGE("failed to get %s bytes/sector\n", fsPath);
+    }
+    if (ioctl(fd, BLKGETSIZE, &bsize))
+    {
+        bsize = 0;
+        SLOGE("failed to get %s device size\n", fsPath);
+    }
+
+    close(fd);
+    SLOGD("total cluster is %d", ( (unsigned long long)bsize * 512) / (bps * 8));
+
+    if (!numSectors && bps && bsize)
+    {
+        if ( (((unsigned long long)bsize * 512) / (bps * 8)) > 65536 )
+            args[2] = "32";
+        else
+            args[2] = "16";
+    }
+    else
+        args[2] = "32";
+
+    args[3] = "-O";
+    args[4] = "android";
+    args[5] = "-c";
+    args[6] = "8";
+
+    SLOGD("%s %s %s %s %s %s %s", args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
+
+    if (numSectors) {
+        char tmp[32];
+        snprintf(tmp, sizeof(tmp), "%u", numSectors);
+        const char *size = tmp;
+        args[7] = "-s";
+        args[8] = size;
+        args[9] = fsPath;
+        args[10] = NULL;
+        rc = logwrap(11, args, 1);
+    } else {
+/***modify by xiangxiang***/
+	if (isInternalSd){
+	args[7] = "-L";
+	args[8] = "MID-700";       // modify your label here
+	args[9] = fsPath;
+   args[10] = NULL;
+   rc = logwrap(11, args, 1);
+   }else{
+       args[7] = fsPath;
+       args[8] = NULL;
+        rc = logwrap(9, args, 1);
+   }
+       /****end****/
+    }
+
+    if (rc == 0) {
+        SLOGI("Filesystem formatted OK");
+        return 0;
+    } else {
+        SLOGE("Format failed (unknown exit code %d)", rc);
+        errno = EIO;
+        return -1;
+    }
+    return 0;
+}
+/***end****/
+
 int Fat::format(const char *fsPath, unsigned int numSectors) {
     int fd;
     const char *args[11];
diff --git a/Fat.h b/Fat.h
index e02d88c..05a8f72 100755
--- a/Fat.h
+++ b/Fat.h
@@ -26,6 +26,7 @@ public:
                        bool ro, bool remount, bool executable,
                        int ownerUid, int ownerGid, int permMask,
                        bool createLost);
+    static int format(const char *fsPath, unsigned int numSectors, bool isInternalSd);
     static int format(const char *fsPath, unsigned int numSectors);
 };
 
diff --git a/Volume.cpp b/Volume.cpp
index af1f9e2..a081eb1 100755
--- a/Volume.cpp
+++ b/Volume.cpp
@@ -267,7 +267,8 @@ int Volume::formatVol() {
     if (mDebug) {
         SLOGI("Formatting volume %s (%s)", getLabel(), devicePath);
     }
-    if (Fat::format(devicePath, 0)) 
+    /****modify by xiangxiang****/
+if (Fat::format(devicePath,0,IsEmmcStorage()))
     {
         SLOGE("Failed to format (%s)", strerror(errno));
         goto err;
@@ -457,7 +458,8 @@ __CHECK_FAT_AGAIN:
 #ifdef MTK_EMMC_SUPPORT
             if ( mVm->isFirstBoot() && IsEmmcStorage()) {
                 SLOGI("** This is first boot and internal sd is not formatted. Try to format it. (%s)\n", devicePath);
-                 if (Fat::format(devicePath, 0))
+                 /****modify by xiangxiang***/
+                 if (Fat::format(devicePath, 0,IsEmmcStorage()))
 			    {
 				  SLOGE("Failed to format (%s)", strerror(errno));				  
 			    }
